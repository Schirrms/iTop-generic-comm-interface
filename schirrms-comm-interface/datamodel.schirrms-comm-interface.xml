<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.5">
	<constants>
	</constants>
	<classes>
		<!--
		This class stores all types of connectors : Optical Fiber, RJ-45, DB-9...
		-->
		<class id="GenericPhysCommConnector" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericphyscommconnector</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<format>%1$s</format>
					<attributes>
						<attribute id="type"/>
					</attributes>
				</naming>
				<display_template/>
				<reconciliation>
					<attributes>
						<attribute id="type"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="type" xsi:type="AttributeString">
					<sql>type</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="comment" xsi:type="AttributeText">
					<sql>comment</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="genericcommphysinterface_list" xsi:type="AttributeLinkedSet">
					<linked_class>GenericCommPhysInterface</linked_class>
					<ext_key_to_me>physcommtype_id</ext_key_to_me>
					<edit_mode>add_only</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="type">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
						<item id="genericcommphysinterface_list">
							<rank>30</rank>
						</item>
					</items>
				</details>
				<list>
					<items>
						<item id="type">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
					</items>
				</list>
				<search>
					<items>
						<item id="type">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
					</items>
				</search>
			</presentation>
		</class>
		<!--
		this class stores all kind of 'level two' protocols : Ethernet, Fiber Channel, RS-232...
		-->
		<class id="GenericCommProtocol" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcommprotocol</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="protocol"/>
					</attributes>
				</naming>
				<display_template/>
				<reconciliation>
					<attributes>
						<attribute id="protocol"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="protocol" xsi:type="AttributeString">
					<sql>protocol</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="comment" xsi:type="AttributeText">
					<sql>comment</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="genericcomminterface_list" xsi:type="AttributeLinkedSet">
					<linked_class>GenericCommInterface</linked_class>
					<ext_key_to_me>commproto_id</ext_key_to_me>
					<edit_mode>add_only</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="protocol">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
						<item id="genericcomminterface_list">
							<rank>30</rank>
						</item>
					</items>
				</details>
				<list>
					<items>
						<item id="protocol">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<!--
		this class stores speeds for the interfaces (instead of setting the speed individually for each interface)
		-->
		<class id="GenericCommSpeed" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcommspeed</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="humanspeed"/>
					</attributes>
				</naming>
				<display_template/>
				<reconciliation>
					<attributes>
						<attribute id="humanspeed"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="humanspeed" xsi:type="AttributeString">
					<sql>humanspeed</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="bitspeed" xsi:type="AttributeDecimal">
					<sql>bitspeed</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
					<duplicates>false</duplicates>
					<digits>18</digits>
					<decimals>0</decimals>
				</field>
				<field id="comment" xsi:type="AttributeText">
					<sql>comment</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="genericcomminterface_list" xsi:type="AttributeLinkedSet">
					<linked_class>GenericCommInterface</linked_class>
					<ext_key_to_me>humanspeed_id</ext_key_to_me>
					<edit_mode>add_only</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods>
				<method id="GetAttributeFlags">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[ public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
					{
						// Force the computed field to be read-only, preventing it to be written
						if (($sAttCode == 'humanspeed'))
							return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState));
						return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
					}]]></code>
				</method>
				<method id="GetInitialStateAttributeFlags">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
					{
						// Hide the calculated field in object creation form
						if (($sAttCode == 'humanspeed'))
							return(OPT_ATT_HIDDEN | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
						return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
					}]]></code>
				</method>
				<method id="OnInsert">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function OnInsert()
					{
						$this->SetHumanSpeed();
					}]]></code>
				</method>
				<method id="OnUpdate">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function OnUpdate()
					{
						$this->SetHumanSpeed();
					}]]></code>
				</method>
				<method id="SetHumanSpeed">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[public function SetHumanSpeed()
					{
						// read the new value of the bitSpeed
						$dBitSpeed = $this->Get('bitspeed');

						// failsafe, the field cannot be empty
						$sHumanSpeed = $dBitSpeed." b";

						if(is_numeric($dBitSpeed))
						{
							$sUnit = ' KMGTP';
							for ($iLevel=15; $iLevel >0 ;$iLevel=$iLevel-3)
							{
								if ($dBitSpeed >= 10**$iLevel)
								{
									$sHumanSpeed = sprintf('%.3g ', $dBitSpeed / (10**$iLevel)) . substr($sUnit, $iLevel/3, 1) . 'b/s';
									break;
								}
							}
						}

						$this->Set('humanspeed', $sHumanSpeed);
					}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="bitspeed">
							<rank>10</rank>
						</item>
						<item id="humanspeed">
							<rank>20</rank>
						</item>
						<item id="comment">
							<rank>30</rank>
						</item>
						<item id="genericcomminterface_list">
							<rank>40</rank>
						</item>
					</items>
				</details>
				<list>
					<items>
						<item id="bitspeed">
							<rank>10</rank>
						</item>
						<item id="humanspeed">
							<rank>20</rank>
						</item>
						<item id="comment">
							<rank>30</rank>
						</item>
					</items>
				</list>
				<search>
					<items>
						<item id="humanspeed">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
					</items>
				</search>
			</presentation>
		</class>
		<!--
		this class stores redundancy protocols for virtual interfaces : LACP, active/standby, active/active...
		-->
		<class id="VirtualCommRedundancy" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>virtualcommredundancy</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="redundancy"/>
					</attributes>
				</naming>
				<display_template/>
				<reconciliation>
					<attributes>
						<attribute id="redundancy"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="redundancy" xsi:type="AttributeString">
					<sql>redundancy</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="comment" xsi:type="AttributeText">
					<sql>comment</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="virtualcommredundancy_list" xsi:type="AttributeLinkedSet">
					<linked_class>GenericCommVirtInterface</linked_class>
					<ext_key_to_me>virtualcommredundancy_id</ext_key_to_me>
					<edit_mode>add_only</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="redundancy">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
						<item id="virtualcommredundancy_list">
							<rank>30</rank>
						</item>
					</items>
				</details>
				<list>
					<items>
						<item id="redundancy">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
						<item id="virtualcommredundancy_list">
							<rank>30</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<!--
		this abstract class defines a Generic Communication Interface.
		-->
		<class id="GenericCommInterface" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>true</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcomminterface</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field>finalclass</db_final_class_field>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="finalclass"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="name" xsi:type="attributeString">
					<sql>name</sql>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="comment" xsi:type="AttributeText">
					<sql>comment</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="commproto_id" xsi:type="AttributeExternalKey">
					<sql>commproto_id</sql>
					<target_class>GenericCommProtocol</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="commproto_proto" xsi:type="AttributeExternalField">
					<extkey_attcode>commproto_id</extkey_attcode>
					<target_attcode>protocol</target_attcode>
				</field>
				<field id="humanspeed_id" xsi:type="AttributeExternalKey">
					<sql>humanspeed_id</sql>
					<target_class>GenericCommSpeed</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="humanspeed_speed" xsi:type="AttributeExternalField">
					<extkey_attcode>humanspeed_id</extkey_attcode>
					<target_attcode>humanspeed</target_attcode>
				</field>
				<field id="connectableci_id" xsi:type="AttributeExternalKey">
					<sql>connectableci_id</sql>
					<target_class>ConnectableCI</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="connectableci_name" xsi:type="AttributeExternalField">
					<extkey_attcode>connectableci_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="genericcommvirtinterface_list" xsi:type="AttributeLinkedSetIndirect">
					<linked_class>lnkGenericCommInterfaceToGenericCommVirtInterface</linked_class>
					<ext_key_to_me>genericcomminterface_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>genericcommvirtinterface_id</ext_key_to_remote>
					<duplicates/>
				</field>
			</fields>
			<methods/>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>30</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
						<item id="connectableci_id">
							<rank>70</rank>
						</item>
						<item id="genericcommvirtinterface_list">
							<rank>100</rank>
						</item>
					</items>
				</details>
				<default_search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
						<item id="connectableci_id">
							<rank>70</rank>
						</item>
					</items>
				</default_search>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="connectableci_id">
							<rank>70</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
						<item id="connectableci_id">
							<rank>70</rank>
						</item>
					</items>
				</list>
			</presentation>
			<relations>
				<relation id="impacts">
					<neighbours>
						<neighbour id="VirtInterface"> <!-- A key  that is the link with the neighbour_id in the Child AttributeRedundancySettings -->
							<attribute>genericcommvirtinterface_list</attribute> <!-- local key (direct/indirect) to the childCI -->
						</neighbour>
					</neighbours>
				</relation>
			</relations>
		</class>
		<!--
		this class defines the specific attributes of a Generic Physical Communication interface
		-->
		<class id="GenericCommPhysInterface" _delta="define">
			<parent>GenericCommInterface</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcommphysinterface</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
						<attribute id="connectableci_name"/>
 					</attributes>
				</naming>
				<display_template/>
				<icon>images/phys-interface.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="connectableci_id"/>
						<attribute id="connectableci_name"/>
 					</attributes>
				</reconciliation>
				<obsolescence>
					<condition>connectableci_id_obsolescence_flag</condition>
				</obsolescence>
			</properties>
			<fields>
				<field id="physcommtype_id" xsi:type="AttributeExternalKey">
					<sql>physcommtype_id</sql>
					<target_class>GenericPhysCommConnector</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="physcommtype_type" xsi:type="AttributeExternalField">
					<extkey_attcode>physcommtype_id</extkey_attcode>
					<target_attcode>type</target_attcode>
				</field>
				<field id="connected_to_device_id" xsi:type="AttributeExternalKey">
					<sql>connected_to_device_id</sql>
					<is_null_allowed>true</is_null_allowed>
					<target_class>ConnectableCI</target_class>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="connected_to_device_name" xsi:type="AttributeExternalField">
					<extkey_attcode>connected_to_device_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="connected_to_id" xsi:type="AttributeExternalKey">
					<sql>connected_to_id</sql>
					<target_class>GenericCommPhysInterface</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<filter><![CDATA[SELECT GenericCommPhysInterface AS G WHERE G.connected_to_id = '' AND G.id != :this->id AND G.connectableci_id = :this->connected_to_device_id AND G.commproto_id = :this->commproto_id]]></filter>
					<dependencies>
						<attribute id="connected_to_device_id" />
						<attribute id="commproto_id" />
					</dependencies>
				</field>
				<field id="connected_to_name" xsi:type="AttributeExternalField">
					<extkey_attcode>connected_to_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<!-- starting on version 0.6.0 connection impact down to port -->
				<!-- not sure about the 'null allowed'... -->
				<field id="connection_impact" xsi:type="AttributeEnum">
					<values>
						<value id="impacts">impacts</value>
						<value id="depends">depends</value>
					</values>
					<sql>impact</sql>
					<default_value>depends</default_value>
					<is_null_allowed>true</is_null_allowed>
					<display_style>list</display_style>
				</field>
			</fields>
			<methods>
				<method id="ConnectRemotePort">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function ConnectRemotePort()
						{
							// print "ConnectRemotePort begins<BR>";
							if (!(empty($this->Get('connected_to_id'))))
							{
								// print "connected_to_name = ".$this->Get('connected_to_name')."<br>";
								// try to get the port this port is connected to
								$oDevice = MetaModel::GetObject('GenericCommPhysInterface', $this->Get('connected_to_id'));
								if (is_object($oDevice) && (get_class($oDevice) == 'GenericCommPhysInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT GenericCommPhysInterface WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
										array(),
										array(
											'device' => $this->Get('connected_to_id'),
										)
									);

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "En cours sur : '".$oConnection->Get('name')."'<br>";
										// if this port connection_impact is 'depends' then the other side is 'impacts'
										$sImpact = $this->Get('connection_impact');
										$sConnImpact = ($sImpact == 'impacts') ? 'depends' : 'impacts';
										$oConnection->Set('connected_to_id', $this->GetKey());
										$oConnection->Set('connected_to_device_id', $this->Get('connectableci_id'));
										$oConnection->Set('connection_impact', $sConnImpact);
										$oConnection->DBUpdate();
									}
								}
							}
							// print "ConnectRemotePort ends<BR>";
						}
					]]></code>
				</method>
					<method id="DisconnectRemotePort">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function DisconnectRemotePort()
						{
							// print "DisconnectRemotePort begins<BR>";
							if (!(empty($this->GetOriginal('connected_to_id'))))
							{
								// print "was connected_to_name = ".$this->GetOriginal('connected_to_name')."<br>";
								// try to get the port this port was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oDevice = MetaModel::GetObject('GenericCommPhysInterface', $this->GetOriginal('connected_to_id'), false);
								if (is_object($oDevice) && (get_class($oDevice) == 'GenericCommPhysInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT GenericCommPhysInterface WHERE connected_to_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
										array(),
										array(
											'device' => $this->GetKey(),
										)
									);

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "En cours sur : '".$oConnection->Get('name')."'<br>";
										// connection_impact is by default 'depends'
										$oConnection->Set('connected_to_id', '');
										$oConnection->Set('connected_to_device_id', '');
										$oConnection->Set('connection_impact', 'depends');
										$oConnection->DBUpdate();
									}
								}
							}
							// print "DisconnectRemotePort ends<BR>";
						}
					]]></code>
				</method>
				<method id="AfterInsert">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterInsert()
						{
							$this->ConnectRemotePort();
							parent::AfterInsert();
				}]]></code>
				</method>
				<method id="OnUpdate">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterUpdate()
						{
							$this->DisconnectRemotePort();
							$this->ConnectRemotePort();
							parent::OnUpdate();
				}]]></code>
				</method>
				<method id="OnDelete">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterDelete()
						{
							$this->DisconnectRemotePort();
							parent::OnDelete();
				}]]></code>
				</method>
				<!-- This method filters the search interface for virtual to generic connections -->
				<method id="PrefillSearchForm">
					<code><![CDATA[
						public function PrefillSearchForm(&$aContextParam)
						{
							//file_put_contents('/tmp/dd.txt', "in the GenericCommInterface Class\n");
							//file_put_contents('/tmp/dd.txt', print_r($aContextParam, true), FILE_APPEND);
							if($aContextParam['dest_class'] == 'GenericCommVirtInterface')
							{
								if(MetaModel::IsValidAttCode($aContextParam['dest_class'],'connectableci_id') && !empty($aContextParam['source_obj']->Get('connectableci_id')) && 
								MetaModel::IsValidAttCode($aContextParam['dest_class'],'commproto_id') && !empty($aContextParam['source_obj']->Get('commproto_id')))
								{
									$aContextParam['filter']->ResetCondition();
									$aContextParam['filter']->AddCondition('connectableci_id', $aContextParam['source_obj']->Get('connectableci_id'));
									$aContextParam['filter']->AddCondition('commproto_id', $aContextParam['source_obj']->Get('commproto_id'));
									$aContextParam['filter']->AddCondition('id',$aContextParam['source_obj']->GetKey(), '!=');
								}
							}
						}]]>
					</code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="comment">
							<rank>30</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
						<item id="connected_to_device_id">
							<rank>90</rank>
						</item>
						<item id="connected_to_id">
							<rank>100</rank>
						</item>
						<item id="connection_impact">
							<rank>110</rank>
						</item>
						<item id="genericcommvirtinterface_list">
							<rank>120</rank>
						</item>
					</items>
				</details>
				<default_search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="connected_to_device_name">
							<rank>90</rank>
						</item>
						<item id="connected_to_name">
							<rank>100</rank>
						</item>
					</items>
				</default_search>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="connected_to_device_name">
							<rank>90</rank>
						</item>
						<item id="connected_to_name">
							<rank>100</rank>
						</item>
						<item id="connection_impact">
							<rank>110</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
						<item id="connected_to_device_name">
							<rank>90</rank>
						</item>
						<item id="connected_to_name">
							<rank>100</rank>
						</item>
						<item id="connection_impact">
							<rank>110</rank>
						</item>
					</items>
				</list>
			</presentation>
			<relations>
			</relations>
		</class>
		<!--
		this class defines the specific attributes of a Generic Virtual Communication interface
		It also adds the redudancy function
		-->
		<class id="GenericCommVirtInterface" _delta="define">
			<parent>GenericCommInterface</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcommvirtinterface</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
						<attribute id="connectableci_name"/>
 					</attributes>
				</naming>
				<display_template/>
				<icon>images/virt-interface.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="connectableci_id"/>
						<attribute id="connectableci_name"/>
 					</attributes>
				</reconciliation>
				<obsolescence>
					<condition>connectableci_id_obsolescence_flag</condition>
				</obsolescence>
			</properties>
			<fields>
				<field id="virtualcommredundancy_id" xsi:type="AttributeExternalKey">
					<sql>virtualcommredundancy_id</sql>
					<target_class>VirtualCommRedundancy</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="virtualcommredundancy_redundancy" xsi:type="AttributeExternalField">
					<extkey_attcode>virtualcommredundancy_id</extkey_attcode>
					<target_attcode>redundancy</target_attcode>
				</field>
				<!--
				Next field for the actual redundancy : see also virtualinterfaces in GenericCommPhysInterface
				-->
				<field id="virttogenericredundancy" xsi:type="AttributeRedundancySettings">
					<sql>redundancy</sql>
					<relation_code>impacts</relation_code>
					<from_class>GenericCommInterface</from_class>
					<neighbour_id>VirtInterface</neighbour_id>
					<enabled>true</enabled>
					<enabled_mode>user</enabled_mode>
					<min_up>1</min_up>
					<min_up_type>count</min_up_type>
					<min_up_mode>user</min_up_mode>
				</field>
				<field id="genericcomminterface_list" xsi:type="AttributeLinkedSetIndirect">
					<linked_class>lnkGenericCommInterfaceToGenericCommVirtInterface</linked_class>
					<ext_key_to_me>genericcommvirtinterface_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>genericcomminterface_id</ext_key_to_remote>
					<duplicates/>
				</field>
			</fields>
			<methods>
				<method id="PrefillSearchForm">
					<code><![CDATA[
						public function PrefillSearchForm(&$aContextParam)
						{
							//file_put_contents('/tmp/dd.txt', "in the GenericCommVirtInterface Class\n");
							//file_put_contents('/tmp/dd.txt', print_r($aContextParam, true), FILE_APPEND);
							if($aContextParam['dest_class'] == 'GenericCommInterface')
							{
								if(MetaModel::IsValidAttCode($aContextParam['dest_class'],'connectableci_id') && !empty($aContextParam['source_obj']->Get('connectableci_id')) && 
								MetaModel::IsValidAttCode($aContextParam['dest_class'],'commproto_id') && !empty($aContextParam['source_obj']->Get('commproto_id')))
								{
									$aContextParam['filter']->ResetCondition();
									$aContextParam['filter']->AddCondition('connectableci_id', $aContextParam['source_obj']->Get('connectableci_id'));
									$aContextParam['filter']->AddCondition('commproto_id', $aContextParam['source_obj']->Get('commproto_id'));
									$aContextParam['filter']->AddCondition('id',$aContextParam['source_obj']->GetKey(), '!=');
									}
							}
						}]]>
					</code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="comment">
							<rank>30</rank>
						</item>
						<item id="virtualcommredundancy_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
						<item id="genericcomminterface_list">
							<rank>100</rank>
						</item>
					</items>
				</details>
				<default_search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="virtualcommredundancy_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
					</items>
				</default_search>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="virtualcommredundancy_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="virtualcommredundancy_id">
							<rank>40</rank>
						</item>
						<item id="commproto_id">
							<rank>50</rank>
						</item>
						<item id="humanspeed_id">
							<rank>60</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<!--
			This class create a many to many link between generic Interface and virtual Generic Interface
			The idea is that the Virtual interface always depend from the generic interface
			Also a virtual interface is member of the same device that the generic interface(s)
		-->
		<class id="lnkGenericCommInterfaceToGenericCommVirtInterface" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<is_link>1</is_link>
				<category>bizmodel</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>lnkgenericcomminterfacetogenericcommvirtnterface</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="genericcomminterface_id"/>
						<attribute id="genericcommvirtinterface_id"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="genericcomminterface_id"/>
						<attribute id="genericcommvirtinterface_id"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="genericcomminterface_id" xsi:type="AttributeExternalKey">
					<sql>genericcomminterface_id</sql>
					<target_class>GenericCommInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="genericcommvirtinterface_id" xsi:type="AttributeExternalKey">
					<sql>genericcommvirtinterface_id</sql>
					<target_class>GenericCommVirtInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
			</fields>
		<methods/>
		<presentation>
			<details>
				<items>
					<item id="genericcomminterface_id">
						<rank>10</rank>
					</item>
					<item id="genericcommvirtinterface_id">
						<rank>20</rank>
					</item>
				</items>
			</details>
			<search>
				<items>
					<item id="genericcomminterface_id">
						<rank>10</rank>
					</item>
					<item id="genericcommvirtinterface_id">
						<rank>20</rank>
					</item>
				</items>
			</search>
			<list>
				<items>
					<item id="genericcomminterface_id">
						<rank>10</rank>
					</item>
					<item id="genericcommvirtinterface_id">
						<rank>20</rank>
					</item>
				</items>
			</list>
		</presentation>
		</class>
		<!--
				*** All the stuffs for the GenericCommDevices ***
		-->
		<!--
		This class implements a GenericCommDeviceType
		The idea is to put here the global function of the Device :
		SAN switch, WAN Router ...
		-->
		<class id="GenericCommDeviceType" _delta="define">
			<parent>Typology</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcommdevicetype</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="genericcommdevices_list" xsi:type="AttributeLinkedSet">
					<linked_class>GenericCommDevice</linked_class>
					<ext_key_to_me>genericcommdevicetype_id</ext_key_to_me>
					<edit_mode>add_only</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods/>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="genericcommdevices_list">
							<rank>20</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<!--
		This class is a link between ConnectableCIs and GenericCommDevice
		*** To check : is that table still mandatory as we create links at interface level ? ***
		-->
		<!-- starting at version 0.6.0, try to remove this relation
		<class id="lnkConnectableCIToGenericCommDevice" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<is_link>1</is_link>
				<category>bizmodel</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>lnkconnectablecitogenericcommdevice</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="genericcommdevice_id"/>
						<attribute id="connectableci_id"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="genericcommdevice_id"/>
						<attribute id="connectableci_id"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="genericcommdevice_id" xsi:type="AttributeExternalKey">
					<sql>genericcommdevice_id</sql>
					<target_class>GenericCommDevice</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="genericcommdevice_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcommdevice_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="connectableci_id" xsi:type="AttributeExternalKey">
					<sql>connectableci_id</sql>
					<target_class>ConnectableCI</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="connectableci_name" xsi:type="AttributeExternalField">
					<extkey_attcode>connectableci_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="genericcomm_port_id" xsi:type="AttributeExternalKey">
					<filter><![CDATA[SELECT GenericCommPhysInterface WHERE connectableci_id = :this->genericcommdevice_id AND connected_to_id='NULL']]></filter>
					<dependencies>
						<attribute id="connectableci_id"/>
						<attribute id="genericcommdevice_id"/>
					</dependencies>
					<sql>genericcomm_port_id</sql>
					<target_class>GenericCommPhysInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<allow_target_creation>true</allow_target_creation>
				</field>
				<field id="genericcomm_port_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomm_port_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="device_port_id" xsi:type="AttributeExternalKey">
					<filter><![CDATA[SELECT GenericCommPhysInterface WHERE connectableci_id = :this->connectableci_id AND connected_to_id='NULL']]></filter>
					<dependencies>
						<attribute id="connectableci_id"/>
					</dependencies>
					<sql>device_port_id</sql>
					<target_class>GenericCommPhysInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<allow_target_creation>true</allow_target_creation>
				</field>
				<field id="device_port_name" xsi:type="AttributeExternalField">
					<extkey_attcode>device_port_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="connection_type" xsi:type="AttributeEnum">
					<values>
						<value id="uplink">uplink</value>
						<value id="downlink">downlink</value>
					</values>
					<sql>type</sql>
					<default_value>downlink</default_value>
					<is_null_allowed>false</is_null_allowed>
					<display_style>list</display_style>
				</field>
			</fields>
			<methods>
				<method id="AddConnectedGenericCommDevice">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function AddConnectedGenericCommDevice()
	{
		$oDevice = MetaModel::GetObject('ConnectableCI', $this->Get('connectableci_id'));
		if (is_object($oDevice) && (get_class($oDevice) == 'GenericCommDevice'))
		{
			$sOQL = "SELECT	lnkConnectableCIToGenericCommDevice WHERE connectableci_id = :device AND genericcommdevice_id = :gencomm AND genericcomm_port_id = :gcport AND device_port_id = :devport";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
							array(),
							array(
								'gencomm' => $this->Get('connectableci_id'),
								'device'  => $this->Get('genericcommdevice_id'),
								'devport' => $this->Get('genericcomm_port_id'),
								'gcport'  => $this->Get('device_port_id'),
								)
			);	
			if ($oConnectionSet->Count() == 0)
			{
				$sLink = $this->Get('connection_type');
				$sConnLink = ($sLink == 'uplink') ? 'downlink' : 'uplink';

				$oNewLink = new lnkConnectableCIToGenericCommDevice();
				$oNewLink->Set('genericcommdevice_id', $this->Get('connectableci_id'));
				$oNewLink->Set('connectableci_id', $this->Get('genericcommdevice_id'));
				$oNewLink->Set('genericcomm_port_id', $this->Get('device_port_id'));
				$oNewLink->Set('device_port_id', $this->Get('genericcomm_port_id'));
				$oNewLink->Set('connection_type', $sConnLink);
				$oNewLink->DBInsert();
			}
		}
		// time to feed the 'connected_to_id' in the GenericCommPhysInterface table
		// Step One : GenericCommDevice to edge
		$oIntEdge = MetaModel::GetObject('GenericCommPhysInterface', $this->Get('device_port_id'));
		if (is_object($oIntEdge))
		{
			$sOQL = "SELECT GenericCommPhysInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('device_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('genericcomm_port_id'));
				$oConnection->DBUpdate();
			}
		}
		// Step Two : Edge to GenericCommDevice
		$oIntNet = MetaModel::GetObject('GenericCommPhysInterface', $this->Get('genericcomm_port_id'));
		if (is_object($oIntNet))
		{
			$sOQL = "SELECT GenericCommPhysInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('genericcomm_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('device_port_id'));
				$oConnection->DBUpdate();
			}
		}
	}]]>			</code>
				</method>
				<method id="UpdateConnectedGenericCommDevice">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function UpdateConnectedGenericCommDevice()
	{
		$oDevice = MetaModel::GetObject('ConnectableCI', $this->Get('connectableci_id'));
		if (is_object($oDevice) && (get_class($oDevice) == 'GenericCommDevice'))
		{
			// Note: in case a port has been changed, search with the original values
			$sOQL = "SELECT	lnkConnectableCIToGenericCommDevice WHERE connectableci_id = :device AND genericcommdevice_id = :gencomm AND genericcomm_port_id = :gcport AND device_port_id = :devport";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
							array(),
							array(
								'gencomm' => $this->Get('connectableci_id'),
								'device'  => $this->Get('genericcommdevice_id'),
								'devport' => $this->GetOriginal('genericcomm_port_id'),
								'gcport'  => $this->GetOriginal('device_port_id'),
								)
			);	
			$sLink = $this->Get('connection_type');
			$sConnLink = ($sLink == 'uplink') ? 'downlink' : 'uplink';

			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connection_type', $sConnLink);
				$oConnection->Set('genericcomm_port_id', $this->Get('device_port_id'));
				$oConnection->Set('device_port_id', $this->Get('genericcomm_port_id'));
				$oConnection->DBUpdate();
			}
		}
		// time to update the 'connected_to_id' in the PhysicalInterface table
		// due to my poor understanding of the whole method logic, I start
		// by removing all old connections, then adding the new one. 
		// basically, if there was only one move on the connection, I delete
		// and recreate the other for nothing
		// Step One : Delete existing connections
		$sOQLEdge = "SELECT GenericCommPhysInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLEdge), array(), array('id' => $this->Get('device_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
		$sOQLNet = "SELECT GenericCommPhysInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLNet), array(), array('id' => $this->Get('genericcomm_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
		// Step Two : rebuild the connections
		$oIntEdge = MetaModel::GetObject('GenericCommPhysInterface', $this->Get('device_port_id'));
		if (is_object($oIntEdge))
		{
			$sOQL = "SELECT GenericCommPhysInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('device_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('genericcomm_port_id'));
				$oConnection->DBUpdate();
			}
		}
		$oIntNet = MetaModel::GetObject('GenericCommPhysInterface', $this->Get('genericcomm_port_id'));
		if (is_object($oIntNet))
		{
			$sOQL = "SELECT GenericCommPhysInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('genericcomm_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('device_port_id'));
				$oConnection->DBUpdate();
			}
		}
	}]]>			</code>
				</method>
				<method id="DeleteConnectedGenericCommDevice">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function DeleteConnectedGenericCommDevice()
	{
		// The device might be already deleted (reentrance in the current procedure when both device are NETWORK devices!)
		$oDevice = MetaModel::GetObject('ConnectableCI', $this->Get('connectableci_id'), false);
		if (is_object($oDevice) && (get_class($oDevice) == 'GenericCommDevice'))
		{
			// Track and delete the counterpart link
			$sOQL = "SELECT	lnkConnectableCIToGenericCommDevice WHERE connectableci_id = :device AND genericcommdevice_id = :gencomm AND genericcomm_port_id = :gcport AND device_port_id = :devport";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
							array(),
							array(
								'gencomm' => $this->Get('connectableci_id'),
								'device' => $this->Get('genericcommdevice_id'),
								'devport' => $this->Get('genericcomm_port_id'),
								'gcport' => $this->Get('device_port_id'),
								)
			);
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->DBDelete();
			}
		}	
		// time to clean up the 'connected_to_id' in the GenericCommPhysInterface table
		// The cleanup is a little harsh. Search for all occurences of the disconnected port
		// Step One : GenericCommDevice to Edge
		$sOQL = "SELECT GenericCommPhysInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('device_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
		// Step Two : Edge to GenericCommDevice
		$sOQL = "SELECT GenericCommPhysInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('genericcomm_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
	}]]>			</code>
				</method>
				<method id="AfterInsert">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterInsert()
						{
							$this->AddConnectedGenericCommDevice();
							parent::AfterInsert();
				}]]></code>
				</method>
				<method id="AfterUpdate">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterUpdate()
						{
							$this->UpdateConnectedGenericCommDevice();
							parent::AfterUpdate();
				}]]></code>
				</method>
				<method id="AfterDelete">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterDelete()
						{
							$this->DeleteConnectedGenericCommDevice();
							parent::AfterDelete();
				}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="genericcommdevice_id">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="genericcomm_port_id">
							<rank>30</rank>
						</item>
						<item id="device_port_id">
							<rank>40</rank>
						</item>
						<item id="connection_type">
							<rank>50</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="genericcommdevice_id">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="genericcomm_port_id">
							<rank>30</rank>
						</item>
						<item id="device_port_id">
							<rank>40</rank>
						</item>
						<item id="connection_type">
							<rank>50</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="genericcommdevice_id">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="genericcomm_port_id">
							<rank>30</rank>
						</item>
						<item id="device_port_id">
							<rank>40</rank>
						</item>
						<item id="connection_type">
							<rank>50</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		-->
		<!--
		This class defines a Generic Network Connection device (instead of a Network Device, a SAN Device...)
		-->
		<class id="GenericCommDevice" _delta="define">
			<parent>DatacenterDevice</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>genericcommdevice</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon>images/commdevice.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="org_id"/>
						<attribute id="organization_name"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="genericcommdevicetype_id" xsi:type="AttributeExternalKey">
					<sql>genericcommdevicetype_id</sql>
					<target_class>GenericCommDeviceType</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="genericcommdevicetype_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcommdevicetype_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<!-- <field id="connectablecis_list" xsi:type="AttributeLinkedSetIndirect">
					<linked_class>lnkConnectableCIToGenericCommDevice</linked_class>
					<ext_key_to_me>genericcommdevice_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>connectableci_id</ext_key_to_remote>
					<duplicates>true</duplicates>
				</field> -->
				<field id="iosversion_id" xsi:type="AttributeExternalKey">
					<sql>iosversion_id</sql>
					<target_class>IOSVersion</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="iosversion_name" xsi:type="AttributeExternalField">
					<extkey_attcode>iosversion_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="contacts_list">
							<rank>10</rank>
						</item>
						<item id="documents_list">
							<rank>20</rank>
						</item>
						<item id="applicationsolution_list">
							<rank>35</rank>
						</item>
						<item id="genericcommphysinterface_list">
							<rank>40</rank>
						</item>
						<item id="genericcommvirtinterface_list">
							<rank>50</rank>
						</item>
						<!-- <item id="connectablecis_list">
							<rank>60</rank>
						</item> -->
						<item id="providercontracts_list">
							<rank>70</rank>
						</item>
						<item id="services_list">
							<rank>80</rank>
						</item>
						<item id="col:col1">
							<rank>90</rank>
							<items>
								<item id="fieldset:Server:baseinfo">
									<rank>10</rank>
									<items>
										<item id="name">
											<rank>10</rank>
										</item>
										<item id="org_id">
											<rank>20</rank>
										</item>
										<item id="status">
											<rank>30</rank>
										</item>
										<item id="business_criticity">
											<rank>40</rank>
										</item>
										<item id="location_id">
											<rank>50</rank>
										</item>
										<item id="rack_id">
											<rank>60</rank>
										</item>
										<item id="enclosure_id">
											<rank>70</rank>
										</item>
									</items>
								</item>
								<item id="fieldset:Server:moreinfo">
									<rank>20</rank>
									<items>
										<item id="genericcommdevicetype_id">
											<rank>10</rank>
										</item>
										<item id="brand_id">
											<rank>20</rank>
										</item>
										<item id="model_id">
											<rank>30</rank>
										</item>
										<item id="iosversion_id">
											<rank>40</rank>
										</item>
										<item id="managementip">
											<rank>45</rank>
										</item>
										<item id="nb_u">
											<rank>60</rank>
										</item>
										<item id="serialnumber">
											<rank>70</rank>
										</item>
										<item id="asset_number">
											<rank>80</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
						<item id="col:col2">
							<rank>100</rank>
							<items>
								<item id="fieldset:Server:Date">
									<rank>10</rank>
									<items>
										<item id="move2production">
											<rank>10</rank>
										</item>
										<item id="purchase_date">
											<rank>20</rank>
										</item>
										<item id="end_of_warranty">
											<rank>30</rank>
										</item>
									</items>
								</item>
								<item id="fieldset:Server:power">
									<rank>20</rank>
									<items>
										<item id="powerA_id">
											<rank>10</rank>
										</item>
										<item id="powerB_id">
											<rank>20</rank>
										</item>
										<item id="redundancy">
											<rank>30</rank>
										</item>
									</items>
								</item>
								<item id="fieldset:Server:otherinfo">
									<rank>30</rank>
									<items>
										<item id="description">
											<rank>10</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="org_id">
							<rank>20</rank>
						</item>
						<item id="status">
							<rank>30</rank>
						</item>
						<item id="business_criticity">
							<rank>40</rank>
						</item>
						<item id="location_id">
							<rank>50</rank>
						</item>
						<item id="managementip">
							<rank>55</rank>
						</item>
						<item id="brand_id">
							<rank>60</rank>
						</item>
						<item id="model_id">
							<rank>70</rank>
						</item>
						<item id="serialnumber">
							<rank>80</rank>
						</item>
						<item id="asset_number">
							<rank>90</rank>
						</item>
						<item id="powerA_id">
							<rank>100</rank>
						</item>
						<item id="powerB_id">
							<rank>110</rank>
						</item>
						<item id="move2production">
							<rank>120</rank>
						</item>
						<item id="purchase_date">
							<rank>130</rank>
						</item>
						<item id="end_of_warranty">
							<rank>140</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="org_id">
							<rank>10</rank>
						</item>
						<item id="status">
							<rank>20</rank>
						</item>
						<item id="business_criticity">
							<rank>30</rank>
						</item>
						<item id="location_id">
							<rank>40</rank>
						</item>
						<item id="brand_id">
							<rank>50</rank>
						</item>
						<item id="model_id">
							<rank>60</rank>
						</item>
						<item id="serialnumber">
							<rank>70</rank>
						</item>
					</items>
				</list>
			</presentation>
			<methods>
				<method id="GetRelationQueries">
					<comment>/**
					* Placeholder for backward compatibility (iTop &lt;= 2.1.0)
					* in case an extension attempts to redefine this function...
				  */</comment>
					<static>true</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public static function GetRelationQueries($sRelCode){return parent::GetRelationQueries($sRelCode);} ]]></code>
				</method>
			</methods>
			<relations>
				<!--
				<relation id="impacts">
					<neighbours>
						<neighbour id="connectableci">
						-->
							<!-- If using <attribute>connectablecis_list</attribute> then the downlink isn't honoured -->
							<!-- I shamelesly copied this script but I'm not sure it cover all cases of commDevice interconnection... --><!--
							<query_down>SELECT ConnectableCI AS d JOIN lnkConnectableCIToGenericCommDevice AS l1 ON l1.connectableci_id = d.id WHERE l1.genericcommdevice_id = :this-&gt;id AND l1.connection_type='downlink'</query_down>
							<query_up>SELECT GenericCommDevice AS gc JOIN lnkConnectableCIToGenericCommDevice AS l1 ON l1.genericcommdevice_id = gc.id WHERE l1.connectableci_id = :this-&gt;id AND l1.connection_type='downlink'</query_up>
						</neighbour>
					</neighbours>
				</relation>
				-->
			</relations>
		</class>
		<!--
		the next modifications are here to extends existing classes
		-->
		<class id="ConnectableCI" _delta="must_exist">
			<fields>
			<!--
				<field id="genericcommdevice_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
					<linked_class>lnkConnectableCIToGenericCommDevice</linked_class>
					<ext_key_to_me>connectableci_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>genericcommdevice_id</ext_key_to_remote>
					<duplicates>true</duplicates>
				</field>
				-->
				<field id="genericcommphysinterface_list" xsi:type="AttributeLinkedSet" _delta="define">
					<linked_class>GenericCommPhysInterface</linked_class>
					<ext_key_to_me>connectableci_id</ext_key_to_me>
					<edit_mode>in_place</edit_mode>
					<tracking_level>all</tracking_level>
					<count_min>0</count_min>
					<count_max>0</count_max>
				</field>
				<field id="genericcommvirtinterface_list" xsi:type="AttributeLinkedSet" _delta="define">
					<linked_class>GenericCommVirtInterface</linked_class>
					<ext_key_to_me>connectableci_id</ext_key_to_me>
					<edit_mode>in_place</edit_mode>
					<tracking_level>all</tracking_level>
					<count_min>0</count_min>
					<count_max>0</count_max>
				</field>
				<!-- add a redundancy field from GenericCommDevices to ConnectableCI
				should be a logical link, built from the physical connections -->
				<field id="logicalredundancy" xsi:type="AttributeRedundancySettings" _delta="define">
					<sql>logicalredundancy</sql>
					<relation_code>impacts</relation_code>
					<from_class>GenericCommDevice</from_class>
					<neighbour_id>connectableci</neighbour_id>
					<enabled>true</enabled>
					<enabled_mode>user</enabled_mode>
					<min_up>1</min_up>
					<min_up_type>count</min_up_type>
					<min_up_mode>user</min_up_mode>
				</field>
			</fields>
		</class>
		<class id="Enclosure" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="genericcommphysinterface_list" _delta="define">
							<rank>55</rank>
						</item>
						<item id="genericcommvirtinterface_list" _delta="define">
							<rank>56</rank>
						</item>
						<!--
						<item id="genericcommdevice_list" _delta="define">
							<rank>57</rank>
						</item>
						-->
					</items>
				</details>
			</presentation>
		</class>
		<class id="Server" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="genericcommphysinterface_list" _delta="define">
							<rank>55</rank>
						</item>
						<item id="genericcommvirtinterface_list" _delta="define">
							<rank>56</rank>
						</item>
						<!--
						<item id="genericcommdevice_list" _delta="define">
							<rank>57</rank>
						</item>
						-->
					</items>
				</details>
			</presentation>
		</class>
		<!--
		Thanks to VDumas (again), the correct way to extend an AttributeEnum field
		-->
		<class id="Model" _delta="must_exist">
			<fields>
				<field id="type" xsi:type="AttributeEnum" _delta="must_exist">
					<values>
						<value id="GenericCommDevice" _delta="define">GenericCommDevice</value>	
					</values>
				</field>
			</fields>
		</class>
	</classes>
	<!-- 
	I have no idea where (in witch menu) I'm adding The GenericCommDevice
	I hope it will be in the list of 'new CIs'
	-> Well yes, it is added in 'New devices', and also in 'Configuration Management -> Overview -> Infrastructure
	-> For the record : Cell id=0 is the box order  top to bottom
	-> <rnk>5</rank> is the horizontal order in the box. so seems also to be the dashlet id..
	-->
	<menus>
		<menu id="ConfigManagementOverview" xsi:type="DashboardMenuNode" _delta="must_exist">
			<rank>1</rank>
			<parent>ConfigManagement</parent>
			<definition>
				<layout>DashboardLayoutOneCol</layout>
				<title/>
				<cells>
					<cell id="0" _delta="must_exist">
						<rank>0</rank>
						<dashlets>
							<dashlet id="99" xsi:type="DashletBadge" _delta="define">
								<rank>5</rank>
								<class>GenericCommDevice</class>
							</dashlet>
						</dashlets>
					</cell>
					<cell id="4" _delta="must_exist"> <!-- Dashboard -> Miscellaneous -->
						<rank>0</rank>
						<dashlets>
							<dashlet id="90" xsi:type="DashletBadge" _delta="define">
								<rank>6</rank>
								<class>GenericCommSpeed</class>
							</dashlet>
							<dashlet id="91" xsi:type="DashletBadge" _delta="define">
								<rank>7</rank>
								<class>GenericPhysCommConnector</class>
							</dashlet>
							<dashlet id="92" xsi:type="DashletBadge" _delta="define">
								<rank>8</rank>
								<class>GenericCommProtocol</class>
							</dashlet>
							<dashlet id="93" xsi:type="DashletBadge" _delta="define">
								<rank>9</rank>
								<class>GenericCommDeviceType</class>
							</dashlet>
							<dashlet id="95" xsi:type="DashletBadge" _delta="define">
								<rank>10</rank>
								<class>GenericCommPhysInterface</class>
							</dashlet>
							<dashlet id="96" xsi:type="DashletBadge" _delta="define">
								<rank>11</rank>
								<class>GenericCommVirtInterface</class>
							</dashlet>
						</dashlets>
					</cell>
				</cells>
			</definition>
		</menu>
	</menus>
	<user_rights>
		<groups>
		</groups>
		<profiles>
		</profiles>
	</user_rights>
</itop_design>
